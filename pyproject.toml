# 2024 Fraunhofer-Gesellschaft e.V., MÃ¼nchen
# SPDX-License-Identifier: AGPL-3.0-or-later
# This file is the central configuration file for a python project.
# It specifies the required python dependencies/packages.
# It also contains settings for tools like pytest.
# In order to install all required packages use the command
# pip install .[dev]

# -------------------------------
# Build system: defines how to build the project
# -------------------------------
[build-system]
requires = ["hatchling"]  # Build backend dependency
build-backend = "hatchling.build"  # Use hatchling to build the package

# -------------------------------
# Project metadata and dependencies
# -------------------------------
[project]
name = 'forecast-sites'  # Project/package name
version = '0.0.1'  # Version number
requires-python = '>=3.12'  # Python version compatibility
license = { text = 'GNU Affero General Public License v3 or later (AGPLv3+)' }  # License type

# Required packages to run the project
dependencies = [

    'pandas==2.3.1',  # Data manipulation
    'geopandas==1.1.1',  # Geospatial data support
    'numpy==2.0.2', # required by numba 0.60.0: numpy<2.1  # 2.1.3', also see .github/renovate.json5 if you change this
    'mesa==3.0.3',  # Agent-based modeling
    'mesa-geo==0.9.0',  # Mesa extension for geospatial models
    'mesa_viz_tornado==0.1.3',  # Visualization plugin for Mesa
    'numba>=0.60.0', # required by mesa-geo
    'libpysal==4.13.0',  # Spatial analysis tools
    'fiona==1.10.1',  # File access for geospatial formats
    'shapely==2.1.1', # 2.0.6 has a bug; working versions not compatible to python 3.12: https://github.com/shapely/shapely/issues/2186
    'pyproj==3.7.1',  # Coordinate system transformations
    'rtree==1.4.0',  # Spatial indexing
    'scipy==1.16.1',  # Scientific computing
    'jsonpickle==4.1.1',  # Serialize Python objects to JSON
    'matplotlib==3.10.3',  # Plotting
    'colorlog==6.9.0'  # Colored logging output
]

# -------------------------------
# Optional dependency groups
# -------------------------------
[project.optional-dependencies]

# Code linting and formatting
lint = [
	'ruff==0.12.7',
]

# Testing-related packages
test = [
	'pytest==8.4.1',
	'pytest-cov==6.2.1',
	'coverage==7.10.1',
	'mock==5.2.0',
]

# License compliance and management
license = [
	'licensecheck==2025.1.0',
	'license_scanner==0.3.1',
	'reuse==5.0.2',
	'pipreqs==0.5.0',
	'third-party-license-file-generator==2025.6.24'
]

# Development environment (includes lint, test, license groups)
dev = ['forecast-sites[lint, test, license]']

# -------------------------------
# Hatch build configuration
# -------------------------------
[tool.hatch.build.targets.wheel]
packages = ['src', 'test/test_utils']  # Packages to include in wheel

[tool.hatch.build.targets.wheel.sources]
'test/test_utils' = 'test_utils'  # Map logical name to physical path

# -------------------------------
# License checking tool settings
# -------------------------------
[tool.licensecheck]
using = 'PEP631'  # Use PEP 631-compliant metadata
zero = true  # results in non-zero exit code if incompatibilities are found
ignore_licenses = ['ZOPE PUBLIC LICENSE', 'REPOZE PUBLIC LICENSE', 'Apache Software License']  # Known safe licenses to ignore

# -------------------------------
# Import sorting configuration
# -------------------------------
[tool.isort]
profile = 'black'  # Use Black style for import sorting

# -------------------------------
# Pytest configuration
# -------------------------------
[tool.pytest.ini_options]
# Also see
# https://docs.pytest.org/en/7.1.x/customize.html#pyproject-toml
# https://pytest-cov.readthedocs.io/en/latest/config.html
# If you want to see console output from tests, include -s flag
addopts = [
    # !! do not include --cov option here because it would destroy PyCharm debug feature !!
    # Also see https://stackoverflow.com/questions/40718760/unable-to-debug-in-pycharm-with-pytest
    '--import-mode=importlib',
    '--junitxml=report.xml',
    '-s'  # enables logging output in console while debugging tests
]
pythonpath = ['src', 'test']  # Add these folders to sys.path for tests
testpaths = 'test'  # Folder where test files are located

# -------------------------------
# Coverage configuration
# -------------------------------
[tool.coverage.run]
source = ['src']  # Measure coverage only in source files

[tool.coverage.report]
# Also see
# https://coverage.readthedocs.io/en/6.4.4/config.html#config
fail_under = 100  # Fail if less than 100% coverage
show_missing = true  # Show lines that were not covered
include_namespace_packages = true  # Include namespace packages in coverage

[tool.coverage.html]
directory = '.coverage'  # Output directory for HTML coverage report

# -------------------------------
# Ruff linter configuration
# -------------------------------
[tool.ruff]
target-version = "py312"  # Target Python version for linting
line-length = 120  # Maximum line length

[tool.ruff.lint]
select = ["ALL"]  # Enable all linting rules
fixable = ["ALL"]  # Allow auto-fixing for all rules

exclude = [
    ".git",
    "__pycache__",
]

ignore = [
    # doc on rule codes:
    # https://docs.astral.sh/ruff/rules/

    "ANN001", # missing-type-function-argument
    "ANN002", # missing-type-args
    "ANN003", # missing-type-kwargs
    "ANN201", # missing-return-type-undocumented-public-function
    "ANN202", # missing-return-type-private-function
    "ANN204", # missing-return-type-special-method
    "ANN205", # missing-return-type-static-method
    "ANN206", # missing-return-type-class-method

    "COM812", # missing-trailing-comma

    "D100", # undocumented-public-module
    "D101", # undocumented-public-class
    "D102", # undocumented-public-method
    "D103", # undocumented-public-function
    "D104", # undocumented-public-package
    "D105", # undocumented-magic-method
    "D106", # undocumented-public-nested-class
    "D107", # undocumented-public-init

    "D203", # incorrect-blank-line-before-class
    "D212", # multi-line-summary-first-line

    "D400", # missing-trailing-period
    "D415", # missing-terminal-punctuation

    "INP001", # implicit-namespace-package
    "ISC001", # single-line-implicit-string-concatenation

    "PD901", # pandas-df-variable-name

    "Q000", # bad-quotes-inline-string
    "Q003", # avoidable-escaped-quote

    "RET504", # unnecessary-assign

    "RUF012", #	mutable-class-default

    "S311", # suspicious-non-cryptographic-random-usage

    "SIM108", #if-else-block-instead-of-if-exp

    "TD002", # missing-todo-author
    "TD004", # missing-todo-colon
]

[tool.ruff.lint.pylint]
max-args = 10  # Set the allowed number of function arguments

[tool.ruff.lint.per-file-ignores]
# doc on rule codes:
# https://docs.astral.sh/ruff/rules/
"test/*" = [
    "PLR2004", # magic-value-comparison

    "PD901", # pandas-df-variable-name

    "S101", # assert

    "SLF001", # private-member-access

    "UP026", # deprecated-mock-import (we use own "mock" package)
]

[tool.ruff.format]
# Also see
# https://docs.astral.sh/ruff/configuration/
quote-style = "single"  # Use single quotes for string literals